// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EasyCarClient is the client API for EasyCar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EasyCarClient interface {
	Begin(ctx context.Context, in *BeginReq, opts ...grpc.CallOption) (*BeginResp, error)
	Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitResp, error)
	RollBack(ctx context.Context, in *RollBackReq, opts ...grpc.CallOption) (*RollBackReq, error)
}

type easyCarClient struct {
	cc grpc.ClientConnInterface
}

func NewEasyCarClient(cc grpc.ClientConnInterface) EasyCarClient {
	return &easyCarClient{cc}
}

func (c *easyCarClient) Begin(ctx context.Context, in *BeginReq, opts ...grpc.CallOption) (*BeginResp, error) {
	out := new(BeginResp)
	err := c.cc.Invoke(ctx, "/apis.EasyCar/Begin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyCarClient) Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitResp, error) {
	out := new(CommitResp)
	err := c.cc.Invoke(ctx, "/apis.EasyCar/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyCarClient) RollBack(ctx context.Context, in *RollBackReq, opts ...grpc.CallOption) (*RollBackReq, error) {
	out := new(RollBackReq)
	err := c.cc.Invoke(ctx, "/apis.EasyCar/RollBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EasyCarServer is the server API for EasyCar service.
// All implementations must embed UnimplementedEasyCarServer
// for forward compatibility
type EasyCarServer interface {
	Begin(context.Context, *BeginReq) (*BeginResp, error)
	Commit(context.Context, *CommitReq) (*CommitResp, error)
	RollBack(context.Context, *RollBackReq) (*RollBackReq, error)
	mustEmbedUnimplementedEasyCarServer()
}

// UnimplementedEasyCarServer must be embedded to have forward compatible implementations.
type UnimplementedEasyCarServer struct {
}

func (UnimplementedEasyCarServer) Begin(context.Context, *BeginReq) (*BeginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Begin not implemented")
}
func (UnimplementedEasyCarServer) Commit(context.Context, *CommitReq) (*CommitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedEasyCarServer) RollBack(context.Context, *RollBackReq) (*RollBackReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollBack not implemented")
}
func (UnimplementedEasyCarServer) mustEmbedUnimplementedEasyCarServer() {}

// UnsafeEasyCarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EasyCarServer will
// result in compilation errors.
type UnsafeEasyCarServer interface {
	mustEmbedUnimplementedEasyCarServer()
}

func RegisterEasyCarServer(s grpc.ServiceRegistrar, srv EasyCarServer) {
	s.RegisterService(&EasyCar_ServiceDesc, srv)
}

func _EasyCar_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCarServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.EasyCar/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCarServer).Begin(ctx, req.(*BeginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyCar_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCarServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.EasyCar/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCarServer).Commit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyCar_RollBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCarServer).RollBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.EasyCar/RollBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCarServer).RollBack(ctx, req.(*RollBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EasyCar_ServiceDesc is the grpc.ServiceDesc for EasyCar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EasyCar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.EasyCar",
	HandlerType: (*EasyCarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Begin",
			Handler:    _EasyCar_Begin_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _EasyCar_Commit_Handler,
		},
		{
			MethodName: "RollBack",
			Handler:    _EasyCar_RollBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "easycar.proto",
}
