syntax = "proto3";

package proto;

option go_package = "github.com/wuqinqiang/easycar/proto";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";


service EasyCar {
  rpc Begin(google.protobuf.Empty)returns(BeginResp){
    option (google.api.http) = {
      post:"/easycar/begin",
      body:"*"
    };
  }
  rpc Register(RegisterReq)returns(RegisterResp){
    option (google.api.http) = {
      post:"/easycar/register",
      body:"*"
    };
  }

  // phase1
  rpc Start(StartReq)returns(StartResp){
    option (google.api.http) = {
      post:"/easycar/start",
      body:"*"
    };
  }

  // phase2 for commit
  rpc Commit(CommitReq) returns(CommitResp) {
    option (google.api.http) = {
      post:"/easycar/commit",
      body:"*",
    };
  }

  // phase2 for rollback
  rpc Rollback(RollBckReq) returns(RollBckResp) {
    option (google.api.http) = {
      post: "/easycar/rollback",
      body:"*",
    };
  }

  rpc GetState(GetStateReq) returns(GetStateResp){
    option (google.api.http) = {
      post:"/easycar/getState",
      body:"*"
    };
  }
}


enum Err {
  CODE_SUCCESS = 0;
  CODE_FAILED = 1;
}

enum TranType {
  UN_KNOW = 0;
  TCC = 1;
  SAGE = 2;
}
enum Action {
  UN_KNOW_TRANSACTION_TYPE = 0;
  TRY = 1;
  CONFIRM = 2;
  CANCEL = 3;
  NORMAL = 4;
  COMPENSATION = 5;
}

enum BranchState {
  UN_KNOW_STATE = 0;
  READY = 1;
  RETRYING = 2;
  SUCCEED = 3;
  FAILED = 4;
}



message RegisterReq {
  message Branch {
    string uri = 1 [(validate.rules).string = {min_len:1,max_len:299}];
    string reqData = 2;
    string reqHeader = 3;
    TranType tranType = 4 [(validate.rules).enum = {in: [1, 2]}];
    string protocol = 5 [(validate.rules).string = {in: ["http", "https", "grpc"]}];
    Action action = 6 [(validate.rules).enum = {in: [1, 2, 3, 4, 5]}];
    int32 level = 7 [(validate.rules).int32 = {gte:1,lte:99999}];
    int32 timeout = 8;
  }
  string gId = 1 [(validate.rules).string = {min_len:1,max_len:50}];
  repeated Branch branches = 2;
}
message RegisterResp {
}


enum GlobalState {
  GLOBAL_DEFAULT = 0;
  INIT = 1;
  PHASE1_PROCESSING = 2;
  PHASE1_RETRYING = 3;
  PHASE1_FAILED = 4;
  PHASE1_SUCCESS = 5;

  PHASE2_COMMITTING = 6;
  PHASE2_ROLLBACKING = 7;
  PHASE2_COMMIT_FAILED = 8;
  PHASE2_ROLLBACK_FAILED = 9;

  COMMITTED = 10;
  ROLLBACKED = 11;
}


message BeginResp {
  string gId = 1;
}

message StartReq {
  string gId = 1 [(validate.rules).string = {min_len:1,max_len:50}];
}
message StartResp {
  GlobalState state = 1;
}

message CommitReq {
  string gId = 1 [(validate.rules).string = {min_len:1,max_len:50}];
}

message CommitResp {
  string gId = 1 [(validate.rules).string = {min_len:1,max_len:50}];
}

message RollBckReq {
  string gId = 1 [(validate.rules).string = {min_len:1,max_len:50}];
}

message RollBckResp {
  string gId = 1 [(validate.rules).string = {min_len:1,max_len:50}];
}


message GetStateReq {
  string gId = 1 [(validate.rules).string = {min_len:1,max_len:50}];
}

message GetStateResp {
  GlobalState state = 1;
  // todo add branches state?
}