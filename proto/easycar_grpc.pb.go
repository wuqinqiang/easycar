// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/easycar.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EasyCarClient is the client API for EasyCar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EasyCarClient interface {
	Begin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BeginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// phase1
	Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// phase2 for commit
	Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// phase2 for rollback
	Rollback(ctx context.Context, in *RollBckReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateResp, error)
}

type easyCarClient struct {
	cc grpc.ClientConnInterface
}

func NewEasyCarClient(cc grpc.ClientConnInterface) EasyCarClient {
	return &easyCarClient{cc}
}

func (c *easyCarClient) Begin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BeginResp, error) {
	out := new(BeginResp)
	err := c.cc.Invoke(ctx, "/proto.EasyCar/Begin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyCarClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.EasyCar/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyCarClient) Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.EasyCar/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyCarClient) Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.EasyCar/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyCarClient) Rollback(ctx context.Context, in *RollBckReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.EasyCar/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyCarClient) GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateResp, error) {
	out := new(GetStateResp)
	err := c.cc.Invoke(ctx, "/proto.EasyCar/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EasyCarServer is the server API for EasyCar service.
// All implementations must embed UnimplementedEasyCarServer
// for forward compatibility
type EasyCarServer interface {
	Begin(context.Context, *emptypb.Empty) (*BeginResp, error)
	Register(context.Context, *RegisterReq) (*emptypb.Empty, error)
	// phase1
	Start(context.Context, *StartReq) (*emptypb.Empty, error)
	// phase2 for commit
	Commit(context.Context, *CommitReq) (*emptypb.Empty, error)
	// phase2 for rollback
	Rollback(context.Context, *RollBckReq) (*emptypb.Empty, error)
	GetState(context.Context, *GetStateReq) (*GetStateResp, error)
	mustEmbedUnimplementedEasyCarServer()
}

// UnimplementedEasyCarServer must be embedded to have forward compatible implementations.
type UnimplementedEasyCarServer struct {
}

func (UnimplementedEasyCarServer) Begin(context.Context, *emptypb.Empty) (*BeginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Begin not implemented")
}
func (UnimplementedEasyCarServer) Register(context.Context, *RegisterReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedEasyCarServer) Start(context.Context, *StartReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedEasyCarServer) Commit(context.Context, *CommitReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedEasyCarServer) Rollback(context.Context, *RollBckReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedEasyCarServer) GetState(context.Context, *GetStateReq) (*GetStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedEasyCarServer) mustEmbedUnimplementedEasyCarServer() {}

// UnsafeEasyCarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EasyCarServer will
// result in compilation errors.
type UnsafeEasyCarServer interface {
	mustEmbedUnimplementedEasyCarServer()
}

func RegisterEasyCarServer(s grpc.ServiceRegistrar, srv EasyCarServer) {
	s.RegisterService(&EasyCar_ServiceDesc, srv)
}

func _EasyCar_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCarServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EasyCar/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCarServer).Begin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyCar_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCarServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EasyCar/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCarServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyCar_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCarServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EasyCar/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCarServer).Start(ctx, req.(*StartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyCar_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCarServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EasyCar/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCarServer).Commit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyCar_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollBckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCarServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EasyCar/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCarServer).Rollback(ctx, req.(*RollBckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyCar_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyCarServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EasyCar/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyCarServer).GetState(ctx, req.(*GetStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EasyCar_ServiceDesc is the grpc.ServiceDesc for EasyCar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EasyCar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EasyCar",
	HandlerType: (*EasyCarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Begin",
			Handler:    _EasyCar_Begin_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _EasyCar_Register_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _EasyCar_Start_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _EasyCar_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _EasyCar_Rollback_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _EasyCar_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/easycar.proto",
}
